// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Os from "os";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Utils from "./Utils.bs.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Float from "rescript/lib/es6/belt_Float.js";
import * as Belt_Range from "rescript/lib/es6/belt_Range.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_SortArray from "rescript/lib/es6/belt_SortArray.js";

function collectFloatsFromString(input) {
  return Js_array.map(Belt_Option.getExn, Js_array.filter(Belt_Option.isSome, Js_array.map((function (token) {
                        if (token !== undefined && token !== "") {
                          return Belt_Float.fromString(token);
                        }
                        
                      }), Js_string.splitByRe(/\D/, input))));
}

function collectIntsFromString(input) {
  return Js_array.map((function (f) {
                return f | 0;
              }), collectFloatsFromString(input));
}

function intFromString(str) {
  return Belt_Option.getExn(Belt_Int.fromString(str));
}

function toMonkey(input) {
  var lines = Js_string.split(Os.EOL, input);
  var match = Js_array.sliceFrom(-2, Js_string.split(" ", Caml_array.get(lines, 2)));
  if (match.length !== 2) {
    throw {
          RE_EXN_ID: Utils.WentSouth,
          Error: new Error()
        };
  }
  var o = match[0];
  var v = match[1];
  var tmp;
  if (o === "+") {
    tmp = {
      TAG: /* Add */0,
      _0: Belt_Option.getExn(Belt_Int.fromString(v))
    };
  } else if (o === "*" && v === "old") {
    tmp = /* Square */0;
  } else if (o === "*") {
    tmp = {
      TAG: /* Mult */1,
      _0: Belt_Option.getExn(Belt_Int.fromString(v))
    };
  } else {
    throw {
          RE_EXN_ID: Utils.WentSouth,
          Error: new Error()
        };
  }
  return {
          items: {
            contents: collectFloatsFromString(Caml_array.get(lines, 1))
          },
          divider: Utils.first(collectIntsFromString(Caml_array.get(lines, 3))),
          op: tmp,
          onTrue: Utils.first(collectIntsFromString(Caml_array.get(lines, 4))),
          onFalse: Utils.first(collectIntsFromString(Caml_array.get(lines, 5))),
          inspections: {
            contents: 0.0
          }
        };
}

function toMonkeys(input) {
  return Js_array.map(toMonkey, Js_string.split(Os.EOL + Os.EOL, input));
}

function print(monkeys) {
  console.log(Js_array.map((function (m) {
              return m.items.contents;
            }), monkeys));
}

function simulate(worryReducer, rounds, monkeys) {
  Belt_Range.forEach(1, rounds, (function (param) {
          monkeys.contents = Js_array.map((function (monkey) {
                  Js_array.forEach((function (item) {
                          var val = monkey.op;
                          var tmp;
                          tmp = typeof val === "number" ? item * item : (
                              val.TAG === /* Add */0 ? item + val._0 : item * val._0
                            );
                          var newItem = Curry._1(worryReducer, tmp);
                          var match = Caml_int32.mod_(newItem | 0, monkey.divider);
                          var receiverIdx = match !== 0 ? monkey.onFalse : monkey.onTrue;
                          monkey.inspections.contents = monkey.inspections.contents + 1.0;
                          Js_array.push(newItem, Caml_array.get(monkeys.contents, receiverIdx).items.contents);
                        }), monkey.items.contents);
                  monkey.items.contents = [];
                  return monkey;
                }), monkeys.contents);
        }));
  var __x = Js_array.map((function (monkey) {
          return monkey.inspections.contents;
        }), monkeys.contents);
  return Js_array.reduce((function (prim0, prim1) {
                return prim0 * prim1;
              }), 1, Belt_Array.sliceToEnd(Belt_SortArray.stableSortBy(__x, (function (a, b) {
                        return a - b | 0;
                      })), -2));
}

function part01(input) {
  return simulate((function (x) {
                return Math.round(x / 3.0);
              }), 20, {
              contents: toMonkeys(input)
            });
}

export {
  collectFloatsFromString ,
  collectIntsFromString ,
  intFromString ,
  toMonkey ,
  toMonkeys ,
  print ,
  simulate ,
  part01 ,
}
/* os Not a pure module */
