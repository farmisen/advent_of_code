// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "./Utils.bs.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Belt_SetString from "rescript/lib/es6/belt_SetString.js";

function toCompartments(line) {
  var midPoint = line.length / 2 | 0;
  return Js_array.map((function (str) {
                return Belt_SetString.fromArray(Js_string.split("", str));
              }), [
              Js_string.slice(0, midPoint, line),
              Js_string.sliceToEnd(midPoint, line)
            ]);
}

function priority(c) {
  if (c >= "a" && c <= "z") {
    var n = Js_string.charCodeAt(0, c) | 0;
    return (n - 97 | 0) + 1 | 0;
  }
  if (c >= "A" && c <= "Z") {
    var n$1 = Js_string.charCodeAt(0, c) | 0;
    return (n$1 - 65 | 0) + 27 | 0;
  }
  throw {
        RE_EXN_ID: Utils.WentSouth,
        Error: new Error()
      };
}

function part01(input) {
  return Js_array.reduce((function (prim0, prim1) {
                return prim0 + prim1 | 0;
              }), 0, Js_array.map((function (compartments) {
                    return priority(Utils.first(Belt_SetString.toArray(Belt_SetString.intersect(Caml_array.get(compartments, 0), Caml_array.get(compartments, 1)))));
                  }), Js_array.map(toCompartments, input)));
}

function part02(input) {
  return Js_array.reduce((function (prim0, prim1) {
                return prim0 + prim1 | 0;
              }), 0, Js_array.map((function (chunk) {
                    if (chunk.length !== 3) {
                      throw {
                            RE_EXN_ID: Utils.WentSouth,
                            Error: new Error()
                          };
                    }
                    var rucksack1 = chunk[0];
                    var rucksack2 = chunk[1];
                    var rucksack3 = chunk[2];
                    return priority(Utils.first(Belt_SetString.toArray(Belt_SetString.intersect(Belt_SetString.intersect(rucksack1, rucksack2), rucksack3))));
                  }), Js_array.map((function (chunk) {
                        return Js_array.map((function (rucksack) {
                                      return Belt_SetString.fromArray(Js_string.split("", rucksack));
                                    }), chunk);
                      }), Utils.toChunks(3, input))));
}

export {
  toCompartments ,
  priority ,
  part01 ,
  part02 ,
}
/* Utils Not a pure module */
