// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "./Utils.bs.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Belt_Range from "rescript/lib/es6/belt_Range.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function loadContext(param) {
  return Js_array.reduce((function (accu, line) {
                if (Js_string.startsWith("[", line.trim())) {
                  Belt_Range.forEach(0, 8, (function (idx) {
                          var c = Js_string.charAt((idx << 2) + 1 | 0, line);
                          if (c === " ") {
                            return ;
                          }
                          Utils.unshiftArray(Caml_array.get(accu.stacks, idx), c);
                        }));
                } else if (Js_string.startsWith("move", line)) {
                  var match = Js_array.filter(Belt_Option.isSome, Js_array.map(Belt_Int.fromString, Js_string.split(" ", line)));
                  if (match.length !== 3) {
                    throw {
                          RE_EXN_ID: Utils.WentSouth,
                          Error: new Error()
                        };
                  }
                  var count = match[0];
                  var tmp;
                  if (count !== undefined) {
                    var from = match[1];
                    if (from !== undefined) {
                      var to = match[2];
                      if (to !== undefined) {
                        tmp = {
                          from: from,
                          to: to,
                          count: count
                        };
                      } else {
                        throw {
                              RE_EXN_ID: Utils.WentSouth,
                              Error: new Error()
                            };
                      }
                    } else {
                      throw {
                            RE_EXN_ID: Utils.WentSouth,
                            Error: new Error()
                          };
                    }
                  } else {
                    throw {
                          RE_EXN_ID: Utils.WentSouth,
                          Error: new Error()
                        };
                  }
                  Utils.pushTo(accu.moves, tmp);
                }
                return accu;
              }), {
              stacks: Utils.arrayOfSize(9, (function (param) {
                      return [];
                    })),
              moves: []
            }, Utils.loadLines(5));
}

function part01(param) {
  var match = loadContext(undefined);
  var stacks = match.stacks;
  Js_array.forEach((function (param) {
          var to = param.to;
          var from = param.from;
          var match = Utils.sliceArrayAt(Caml_array.get(stacks, from - 1 | 0).length - param.count | 0, Caml_array.get(stacks, from - 1 | 0));
          Caml_array.set(stacks, from - 1 | 0, match[0]);
          Caml_array.set(stacks, to - 1 | 0, Js_array.concat(Utils.reverseArray(match[1]), Caml_array.get(stacks, to - 1 | 0)));
        }), match.moves);
  return Js_array.map((function (stack) {
                return Belt_Option.getExn(Caml_option.undefined_to_opt(stack.pop()));
              }), stacks);
}

function part02(param) {
  var match = loadContext(undefined);
  var stacks = match.stacks;
  Js_array.forEach((function (param) {
          var to = param.to;
          var from = param.from;
          var match = Utils.sliceArrayAt(Caml_array.get(stacks, from - 1 | 0).length - param.count | 0, Caml_array.get(stacks, from - 1 | 0));
          Caml_array.set(stacks, from - 1 | 0, match[0]);
          Caml_array.set(stacks, to - 1 | 0, Js_array.concat(match[1], Caml_array.get(stacks, to - 1 | 0)));
        }), match.moves);
  return Js_array.map((function (stack) {
                return Belt_Option.getExn(Caml_option.undefined_to_opt(stack.pop()));
              }), stacks);
}

export {
  loadContext ,
  part01 ,
  part02 ,
}
/* Utils Not a pure module */
