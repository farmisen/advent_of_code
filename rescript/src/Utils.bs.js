// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Os from "os";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var WentSouth = /* @__PURE__ */Caml_exceptions.create("Utils.WentSouth");

function loadInput(day) {
  var path = "../puzzles/day_" + day.toString().padStart(2, "0") + "/input.txt";
  return Fs.readFileSync(path, {
                encoding: "UTF-8"
              }).toString();
}

function sortNumbers(param) {
  return Js_array.sortInPlaceWith((function (a, b) {
                return a - b | 0;
              }), param);
}

function unwrapOrRaise(exp, a) {
  if (a !== undefined) {
    return Caml_option.valFromOption(a);
  }
  throw exp;
}

function first(array) {
  return Caml_array.get(array, 0);
}

function loadLines(day) {
  return Js_string.split(Os.EOL, loadInput(day));
}

function pushTo(arr, item) {
  Js_array.push(item, arr);
  return arr;
}

function toChunks(size, arr) {
  return Js_array.reducei((function (accumulator, item, index) {
                var chunk;
                if (Caml_int32.mod_(index, size) === 0) {
                  chunk = [];
                } else {
                  var __x = accumulator.pop();
                  chunk = Belt_Option.getWithDefault(__x === undefined ? undefined : Caml_option.some(__x), []);
                }
                return pushTo(accumulator, pushTo(chunk, item));
              }), [], arr);
}

export {
  WentSouth ,
  loadInput ,
  sortNumbers ,
  unwrapOrRaise ,
  first ,
  loadLines ,
  pushTo ,
  toChunks ,
}
/* fs Not a pure module */
