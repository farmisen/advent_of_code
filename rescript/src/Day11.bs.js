// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Os from "os";
import * as Utils from "./Utils.bs.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Js_string from "rescript/lib/es6/js_string.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Belt_MapInt from "rescript/lib/es6/belt_MapInt.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

function collectNumbersFromString(input) {
  return Js_array.map(Belt_Option.getExn, Js_array.filter(Belt_Option.isSome, Js_array.map((function (token) {
                        if (token !== undefined && token !== "") {
                          return Belt_Int.fromString(token);
                        }
                        
                      }), Js_string.splitByRe(/\D/, input))));
}

function intFromString(str) {
  return Belt_Option.getExn(Belt_Int.fromString(str));
}

function toMonkey(input) {
  var lines = Js_string.split(Os.EOL, input);
  var match = Js_array.sliceFrom(-2, Js_string.split(" ", Caml_array.get(lines, 2)));
  if (match.length !== 2) {
    throw {
          RE_EXN_ID: Utils.WentSouth,
          Error: new Error()
        };
  }
  var o = match[0];
  var v = match[1];
  var tmp;
  if (o === "+") {
    tmp = {
      TAG: /* Add */0,
      _0: Belt_Option.getExn(Belt_Int.fromString(v))
    };
  } else if (o === "*" && v === "old") {
    tmp = /* Square */0;
  } else if (o === "*") {
    tmp = {
      TAG: /* Mult */1,
      _0: Belt_Option.getExn(Belt_Int.fromString(v))
    };
  } else {
    throw {
          RE_EXN_ID: Utils.WentSouth,
          Error: new Error()
        };
  }
  return {
          id: Utils.first(collectNumbersFromString(Caml_array.get(lines, 0))),
          items: collectNumbersFromString(Caml_array.get(lines, 1)),
          op: tmp,
          test: {
            divisability: Utils.first(collectNumbersFromString(Caml_array.get(lines, 3))),
            onTrue: Utils.first(collectNumbersFromString(Caml_array.get(lines, 4))),
            onFalse: Utils.first(collectNumbersFromString(Caml_array.get(lines, 5)))
          },
          inspections: 0
        };
}

function toMonkeys(input) {
  return Js_array.reducei((function (monkeys, monkey, idx) {
                return Belt_MapInt.set(monkeys, idx, monkey);
              }), Belt_MapInt.fromArray([]), Js_array.map(toMonkey, Js_string.split(Os.EOL + Os.EOL, input)));
}

function print(pre, monkeys) {
  console.log(pre, Js_array.map((function (m) {
              return m.inspections;
            }), Js_array.map((function (id) {
                  return Belt_MapInt.getExn(monkeys, id);
                }), Belt_MapInt.keysToArray(monkeys))));
}

function newRound(currentRound, divider, monkeys) {
  var monkeyIds = Belt_MapInt.keysToArray(monkeys);
  var modulo = Js_array.reduce((function (prim0, prim1) {
          return Math.imul(prim0, prim1);
        }), 1, Js_array.map((function (m) {
              return m.test.divisability;
            }), Js_array.map((function (id) {
                  return Belt_MapInt.getExn(monkeys, id);
                }), monkeyIds)));
  var t = Js_array.reduce((function (monkeys1, id) {
          var monkey = Belt_MapInt.getExn(monkeys1, id);
          return Js_array.reduce((function (monkeys2, item) {
                        var currentMonkey = Belt_MapInt.getExn(monkeys2, id);
                        var val = currentMonkey.op;
                        var tmpNewItem;
                        tmpNewItem = typeof val === "number" ? Math.imul(item, item) : (
                            val.TAG === /* Add */0 ? item + val._0 | 0 : Math.imul(item, val._0)
                          );
                        var newItem = divider !== 3 ? Caml_int32.mod_(tmpNewItem, modulo) : tmpNewItem / 3 | 0;
                        var match = Caml_int32.mod_(newItem, currentMonkey.test.divisability);
                        var otherMonkeyId = match !== 0 ? currentMonkey.test.onFalse : currentMonkey.test.onTrue;
                        var otherMonkey = Belt_MapInt.getExn(monkeys2, otherMonkeyId);
                        var __x = Belt_MapInt.set(monkeys2, id, {
                              id: currentMonkey.id,
                              items: Js_array.filter((function (i) {
                                      return i !== item;
                                    }), currentMonkey.items),
                              op: currentMonkey.op,
                              test: currentMonkey.test,
                              inspections: currentMonkey.inspections + 1 | 0
                            });
                        return Belt_MapInt.set(__x, otherMonkeyId, {
                                    id: otherMonkey.id,
                                    items: Utils.pushTo(otherMonkey.items, newItem),
                                    op: otherMonkey.op,
                                    test: otherMonkey.test,
                                    inspections: otherMonkey.inspections
                                  });
                      }), monkeys1, monkey.items);
        }), monkeys, monkeyIds);
  if (currentRound % 1000 === 0 || currentRound === 1 || currentRound === 20) {
    console.log(currentRound);
    print(">", t);
  }
  return t;
}

function simulate(divider, rounds, input) {
  var monkeys = toMonkeys(input);
  var reduceRounds = function (_monkeys, divider, _roundsLeft) {
    while(true) {
      var roundsLeft = _roundsLeft;
      var monkeys = _monkeys;
      if (roundsLeft === 0) {
        return monkeys;
      }
      _roundsLeft = roundsLeft - 1 | 0;
      _monkeys = newRound((rounds - roundsLeft | 0) + 1 | 0, divider, monkeys);
      continue ;
    };
  };
  var newMonkeys = reduceRounds(monkeys, divider, rounds);
  var t = Js_array.sliceFrom(-2, Js_array.map((function (m) {
              return m.inspections;
            }), Utils.sortArrayWith((function (m1, m2) {
                  return m1.inspections - m2.inspections | 0;
                }), Js_array.map((function (id) {
                      return Belt_MapInt.getExn(newMonkeys, id);
                    }), Belt_MapInt.keysToArray(newMonkeys)))));
  console.log(t);
  return Js_array.reduce((function (prim0, prim1) {
                return Math.imul(prim0, prim1);
              }), 1, t);
}

function part01(input) {
  return simulate(3, 20, input);
}

function part02(input) {
  return simulate(1, 10000, input);
}

export {
  collectNumbersFromString ,
  intFromString ,
  toMonkey ,
  toMonkeys ,
  print ,
  newRound ,
  simulate ,
  part01 ,
  part02 ,
}
/* os Not a pure module */
